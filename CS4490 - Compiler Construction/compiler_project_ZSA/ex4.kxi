class poodle
{
	unprotected char name[];
	unprotected int sizeOfName;
	poodle(char n[], int size)
	{
		name = n;
		sizeOfName = size;
	}
}

class dog
{
	unprotected int dog_years;
	
	dog(int x)
	{
		dog_years = x;
		cout << dog_years;
	}
	
	unprotected poodle g()
	{
		int maxNameSize = 10;
		char name[] = new char[maxNameSize];
		poodle s = new poodle(name, maxNameSize);
		bool checking_my_offsets;
		bool checking_my_offsets2;
		return s;
	}
	
	unprotected void moreCat(cat y, dog d)
	{
		y.moreDog(y, d);
	}
	
	unprotected dog defaultInitialize()
	{
		dog default = this;
		return default;
	}
}

class cat
{
	unprotected int age;
	unprotected int height;
	unprotected int width;
	
	unprotected int q(int x)
	{
		{
			return x + 5;
		}
	}
	
	unprotected void print()
	{
		int x;
		cin >> x;
		cout << x;
	}
	
	protected int f(int r, bool w)
	{
		if (w)
			return r;
		else return 0;
	}
	
	unprotected int f2(int r, bool w)
	{
		if (w)
			return r;
		else return 0;
	}
	
	cat(int r, int g, int k)
	{
		age = r;
		height = g;
		width = k;
		f(r * 7, g < k);
	}
	
	unprotected void moreDog(cat y, dog d)
	{
		d.moreCat(y, d);
	}
	
	unprotected dog d()
	{
		dog default = new dog(0);
		return default;
	}
}

class catdog
{
	catdog()
	{
		cat y;
		dog d;
		y.moreDog(y, d);
	}
}

void kxi2015 main()
{
	int height;
	int width;
	cat sprite = new cat(5, height, width);
	dog milo;
	dog dogPound[] = new dog[25];
	int maxDogs = 25;
	cat catHouse[] = new cat[15];
	
	int x;
	int y;
	int g;
	int f;
	int k;
	int counter = 0;
	char charlie;
	
	int xArr[] = new int[5];
	int r;
	xArr[4] = r;
	
	x = y;
	x = y * g + f /k;
	sprite.age = milo.dog_years;
	x = sprite.f2(k, g < 4) + g * r;
	sprite.d().g().sizeOfName =  r;
	dogPound[r + 3] = dogPound[r-5];
	
	while (counter < 25)
	{
		dogPound[counter] = milo.defaultInitialize();
		counter = counter + 1;
	}
	
	counter = 0;
	
	while (counter < 10)
	{
		dogPound[counter] = new dog(maxDogs);
		
		//dogPound[counter] = milo;
		counter = counter + 1;
		maxDogs = maxDogs - 1;
		
		cin >> x;
		dogPound[maxDogs] = new dog(x);
		cout << dogPound[counter].dog_years;
		//cout << dogPound.dog_years;
		cout << dogPound[maxDogs].dog_years;
	}
	
	charlie = itoa(counter);
	counter = atoi(charlie);
	
	//catHouse[5] = dogPound;
}