
Command Line Arguments:

kxiFileName: ex6.kxi
debugType: dall
debugStep: -999
debugging: 1
Output File: output.txt

Line 1 :

Called compilation_unit.
Lexem: class
Type: Keyword
Called class_declaration.
Lexem: cat
Type: Identifier

Line 2 :

Lexem: {
Type: Block Bracket

Line 3 :

Lexem: unprotected
Type: Keyword
Called class_member_declaration.
Called modifier.
Lexem: int
Type: Keyword
Called type.
Lexem: x
Type: Identifier
Lexem: =
Type: Assignment Operator
Called field_declaration.
Lexem: 5
Type: Number
Called assignment_expression.
Called expression.
Called numeric_literal.
Called number.
Lexem: +
Type: Math Operator
Called expressionz.
Lexem: 9
Type: Number
Called expression.
Called numeric_literal.
Called number.
Lexem: *
Type: Math Operator
Called expressionz.
Lexem: 4
Type: Number
Called expression.
Called numeric_literal.
Called number.
Lexem: ;
Type: Punctuation

Line 4 :

Lexem: unprotected
Type: Keyword
Called class_member_declaration.
Called modifier.
Lexem: int
Type: Keyword
Called type.
Lexem: c
Type: Identifier
Lexem: [
Type: Array Bracket
Called field_declaration.
Lexem: ]
Type: Array Bracket
Lexem: =
Type: Assignment Operator
Lexem: new
Type: Keyword
Called assignment_expression.
Lexem: int
Type: Keyword
Called type.
Lexem: [
Type: Array Bracket
Called new_declaration.
Lexem: 2
Type: Number
Called expression.
Called numeric_literal.
Called number.
Lexem: 5
Type: Number
Called number.
Lexem: ]
Type: Array Bracket
Lexem: ;
Type: Punctuation

Line 5 :

Lexem: unprotected
Type: Keyword
Called class_member_declaration.
Called modifier.
Lexem: int
Type: Keyword
Called type.
Lexem: w
Type: Identifier
Lexem: ;
Type: Punctuation
Called field_declaration.

Line 6 :


Line 7 :

Lexem: unprotected
Type: Keyword
Called class_member_declaration.
Called modifier.
Lexem: int
Type: Keyword
Called type.
Lexem: doubleIt
Type: Identifier
Lexem: (
Type: Parenthesis
Called field_declaration.
Lexem: int
Type: Keyword
Called parameter_list.
Called parameter.
Called type.
Lexem: i
Type: Identifier
Lexem: )
Type: Parenthesis

Line 8 :

Lexem: {
Type: Block Bracket
Called method_body.

Line 9 :

Lexem: return
Type: Keyword
Called statement.
Lexem: i
Type: Identifier
Called expression.
Lexem: *
Type: Math Operator
Called expressionz.
Lexem: i
Type: Identifier
Called expression.
Lexem: ;
Type: Punctuation

Line 10 :

Lexem: }
Type: Block Bracket

Line 11 :


Line 12 :

Lexem: cat
Type: Identifier
Called class_member_declaration.
Called constructor_declaration.
Lexem: (
Type: Parenthesis
Lexem: int
Type: Keyword
Called parameter_list.
Called parameter.
Called type.
Lexem: i
Type: Identifier
Lexem: )
Type: Parenthesis

Line 13 :

Lexem: {
Type: Block Bracket
Called method_body.

Line 14 :

Lexem: w
Type: Identifier
Called statement.
Called expression.
Lexem: =
Type: Assignment Operator
Called expressionz.
Lexem: i
Type: Identifier
Called assignment_expression.
Called expression.
Lexem: ;
Type: Punctuation

Line 15 :

Lexem: }
Type: Block Bracket

Line 16 :

Lexem: }
Type: Block Bracket

Line 17 :


Line 18 :

Lexem: void
Type: Keyword
Lexem: kxi2015
Type: Keyword
Lexem: main
Type: Keyword
Lexem: (
Type: Parenthesis
Lexem: )
Type: Parenthesis

Line 19 :

Lexem: {
Type: Block Bracket
Called method_body.

Line 20 :


Line 21 :

Lexem: }
Type: Block Bracket
Lexem: ÿ
Type: EOF
Finished Parse Phase 1.

S0	Scope:	g
	Symid:	S0
	Value:	1
	Kind:	literal
	Data:	Offset: 0
		type: int
		accessMod: unprotected

S1	Scope:	g
	Symid:	S1
	Value:	4
	Kind:	literal
	Data:	Offset: 0
		type: int
		accessMod: unprotected

S2	Scope:	g
	Symid:	S2
	Value:	0
	Kind:	literal
	Data:	Offset: 0
		type: int
		accessMod: unprotected

C3	Scope:	g
	Symid:	C3
	Value:	cat
	Kind:	Class
	Data:	Size: 12
		Type: cat

M4	Scope:	g.cat
	Symid:	M4
	Value:	StaticInit
	Kind:	method
	Data:	Size: -12
		returnType: void
		Param:	
		accessMod: protected

S5	Scope:	g
	Symid:	S5
	Value:	int
	Kind:	literal
	Data:

S6	Scope:	g
	Symid:	S6
	Value:	5
	Kind:	literal
	Data:	Offset: 0
		type: int
		accessMod: unprotected

S7	Scope:	g
	Symid:	S7
	Value:	9
	Kind:	literal
	Data:	Offset: 0
		type: int
		accessMod: unprotected

V9	Scope:	g.cat
	Symid:	V9
	Value:	x
	Kind:	ivar
	Data:	Offset: 0
		type: int
		accessMod: unprotected

S12	Scope:	g
	Symid:	S12
	Value:	25
	Kind:	literal
	Data:	Offset: 0
		type: int
		accessMod: unprotected

V13	Scope:	g.cat
	Symid:	V13
	Value:	c
	Kind:	ivar
	Data:	Offset: 4
		type: @:int
		accessMod: unprotected

V15	Scope:	g.cat
	Symid:	V15
	Value:	w
	Kind:	ivar
	Data:	Offset: 8
		type: int
		accessMod: unprotected

M18	Scope:	g.cat
	Symid:	M18
	Value:	doubleIt
	Kind:	method
	Data:	Size: -16
		returnType: int
		Param:	[P19]
		accessMod: unprotected

P19	Scope:	g.cat.doubleIt
	Symid:	P19
	Value:	i
	Kind:	param
	Data:	Offset: -15
		type: int
		accessMod: protected

M21	Scope:	g.cat
	Symid:	M21
	Value:	cat
	Kind:	method
	Data:	Size: -16
		returnType: void
		Param:	[P22]
		accessMod: unprotected

P22	Scope:	g.cat.cat
	Symid:	P22
	Value:	i
	Kind:	param
	Data:	Offset: -15
		type: int
		accessMod: protected

M23	Scope:	g
	Symid:	M23
	Value:	main
	Kind:	method
	Data:	Size: -12
		returnType: void
		Param:	[]
		accessMod: unprotected

Called compilation_unit.
Lexem: class
Type: Keyword
Called class_declaration.
Lexem: cat
Type: Identifier

Line 2 :

Lexem: {
Type: Block Bracket

Line 3 :

Lexem: unprotected
Type: Keyword
Called class_member_declaration.
Called modifier.
Lexem: int
Type: Keyword
Called type.

			int	- #tPush
   Operator Stack	Semantic Action Stack
Lexem: x
Type: Identifier
Called tExist.
Called existence.

			
   Operator Stack	Semantic Action Stack
Lexem: =
Type: Assignment Operator
Called field_declaration.

			V9	- #vPush
   Operator Stack	Semantic Action Stack

	=		V9	- #vPush
   Operator Stack	Semantic Action Stack
Lexem: 5
Type: Number
Called assignment_expression.
Called expression.
Called numeric_literal.
Called number.
Lexem: +
Type: Math Operator

			S6	- #lPush
	=		V9	- #vPush
   Operator Stack	Semantic Action Stack
Called expressionz.

	+		S6	- #lPush
	=		V9	- #vPush
   Operator Stack	Semantic Action Stack
Lexem: 9
Type: Number
Called expression.
Called numeric_literal.
Called number.
Lexem: *
Type: Math Operator

			S7	- #lPush
	+		S6	- #lPush
	=		V9	- #vPush
   Operator Stack	Semantic Action Stack
Called expressionz.

	*		S7	- #lPush
	+		S6	- #lPush
	=		V9	- #vPush
   Operator Stack	Semantic Action Stack
Lexem: 4
Type: Number
Called expression.
Called numeric_literal.
Called number.
Lexem: ;
Type: Punctuation

			S1	- #lPush
	*		S7	- #lPush
	+		S6	- #lPush
	=		V9	- #vPush
   Operator Stack	Semantic Action Stack
Called EOE.
Called semanticMultiply.
Called semanticTypeCheckSAS.
Called createSemanticTemporary.

			T25	- #*
	+		S6	- #lPush
	=		V9	- #vPush
   Operator Stack	Semantic Action Stack
Called semanticAdd.
Called semanticTypeCheckSAS.
Called createSemanticTemporary.

			T26	- #+
	=		V9	- #vPush
   Operator Stack	Semantic Action Stack
Called semanticEqual.
Called semanticTypeCheckSAS.

			
   Operator Stack	Semantic Action Stack

Line 4 :

Lexem: unprotected
Type: Keyword
Called class_member_declaration.
Called modifier.
Lexem: int
Type: Keyword
Called type.

			int	- #tPush
   Operator Stack	Semantic Action Stack
Lexem: c
Type: Identifier
Called tExist.
Called existence.

			
   Operator Stack	Semantic Action Stack
Lexem: [
Type: Array Bracket
Called field_declaration.
Lexem: ]
Type: Array Bracket
Lexem: =
Type: Assignment Operator

			V13	- #vPush
   Operator Stack	Semantic Action Stack

	=		V13	- #vPush
   Operator Stack	Semantic Action Stack
Lexem: new
Type: Keyword
Called assignment_expression.
Lexem: int
Type: Keyword
Called type.

			int	- #tPush
	=		V13	- #vPush
   Operator Stack	Semantic Action Stack
Lexem: [
Type: Array Bracket
Called new_declaration.

	[		int	- #tPush
	=		V13	- #vPush
   Operator Stack	Semantic Action Stack
Lexem: 2
Type: Number
Called expression.
Called numeric_literal.
Called number.
Lexem: 5
Type: Number
Called number.
Lexem: ]
Type: Array Bracket

			S12	- #lPush
	[		int	- #tPush
	=		V13	- #vPush
   Operator Stack	Semantic Action Stack
Lexem: ;
Type: Punctuation
Called semanticClosingBracket.

			S12	- #lPush
	[		int	- #tPush
	=		V13	- #vPush
   Operator Stack	Semantic Action Stack
Called newArr.
Called createSemanticTemporary.
Called createSemanticTemporary.

	[		new_sar	- #new[]
	=		V13	- #vPush
   Operator Stack	Semantic Action Stack
Called EOE.
Called semanticEqual.
Called semanticTypeCheckSAS.

			
   Operator Stack	Semantic Action Stack

Line 5 :

Lexem: unprotected
Type: Keyword
Called class_member_declaration.
Called modifier.
Lexem: int
Type: Keyword
Called type.

			int	- #tPush
   Operator Stack	Semantic Action Stack
Lexem: w
Type: Identifier
Called tExist.
Called existence.

			
   Operator Stack	Semantic Action Stack
Lexem: ;
Type: Punctuation
Called field_declaration.

			V15	- #vPush
   Operator Stack	Semantic Action Stack
Called EOE.

Line 6 :


Line 7 :

Lexem: unprotected
Type: Keyword
Called class_member_declaration.
Called modifier.
Lexem: int
Type: Keyword
Called type.

			int	- #tPush
			V15	- #vPush
   Operator Stack	Semantic Action Stack
Lexem: doubleIt
Type: Identifier
Called tExist.
Called existence.

			V15	- #vPush
   Operator Stack	Semantic Action Stack
Lexem: (
Type: Parenthesis
Called field_declaration.
Lexem: int
Type: Keyword
Called parameter_list.
Called parameter.
Called type.

			int	- #tPush
			V15	- #vPush
   Operator Stack	Semantic Action Stack
Lexem: i
Type: Identifier
Called tExist.
Called existence.

			V15	- #vPush
   Operator Stack	Semantic Action Stack
Lexem: )
Type: Parenthesis

Line 8 :

Lexem: {
Type: Block Bracket
Called method_body.

Line 9 :

Lexem: return
Type: Keyword
Called statement.
Lexem: i
Type: Identifier
Called expression.

			i	- #iPush
			V15	- #vPush
   Operator Stack	Semantic Action Stack
Lexem: *
Type: Math Operator
Called iExist.
Called existence.

			P19	- #iExist
			V15	- #vPush
   Operator Stack	Semantic Action Stack
Called expressionz.

			P19	- #iExist
	*		V15	- #vPush
   Operator Stack	Semantic Action Stack
Lexem: i
Type: Identifier
Called expression.

			i	- #iPush
			P19	- #iExist
	*		V15	- #vPush
   Operator Stack	Semantic Action Stack
Lexem: ;
Type: Punctuation
Called iExist.
Called existence.

			P19	- #iExist
			P19	- #iExist
	*		V15	- #vPush
   Operator Stack	Semantic Action Stack
Called semanticReturn.
Called EOE.
Called semanticMultiply.
Called semanticTypeCheckSAS.
Called createSemanticTemporary.

			T34	- #*
			V15	- #vPush
   Operator Stack	Semantic Action Stack

			V15	- #vPush
   Operator Stack	Semantic Action Stack

Line 10 :

Lexem: }
Type: Block Bracket

Line 11 :


Line 12 :

Lexem: cat
Type: Identifier
Called class_member_declaration.
Called constructor_declaration.
Called CD.

			V15	- #vPush
   Operator Stack	Semantic Action Stack
Lexem: (
Type: Parenthesis
Lexem: int
Type: Keyword
Called parameter_list.
Called parameter.
Called type.

			int	- #tPush
			V15	- #vPush
   Operator Stack	Semantic Action Stack
Lexem: i
Type: Identifier
Called tExist.
Called existence.

			V15	- #vPush
   Operator Stack	Semantic Action Stack
Lexem: )
Type: Parenthesis

Line 13 :

Lexem: {
Type: Block Bracket
Called method_body.

Line 14 :

Lexem: w
Type: Identifier
Called statement.
Called expression.

			w	- #iPush
			V15	- #vPush
   Operator Stack	Semantic Action Stack
Lexem: =
Type: Assignment Operator
Called iExist.
Called existence.
Called existence.

			V15	- #iExist
			V15	- #vPush
   Operator Stack	Semantic Action Stack
Called expressionz.

			V15	- #iExist
	=		V15	- #vPush
   Operator Stack	Semantic Action Stack
Lexem: i
Type: Identifier
Called assignment_expression.
Called expression.

			i	- #iPush
			V15	- #iExist
	=		V15	- #vPush
   Operator Stack	Semantic Action Stack
Lexem: ;
Type: Punctuation
Called iExist.
Called existence.

			P22	- #iExist
			V15	- #iExist
	=		V15	- #vPush
   Operator Stack	Semantic Action Stack
Called EOE.
Called semanticEqual.
Called semanticTypeCheckSAS.

			V15	- #vPush
   Operator Stack	Semantic Action Stack

Line 15 :

Lexem: }
Type: Block Bracket

Line 16 :

Lexem: }
Type: Block Bracket

Line 17 :


Line 18 :

Lexem: void
Type: Keyword
Lexem: kxi2015
Type: Keyword
Lexem: main
Type: Keyword
Lexem: (
Type: Parenthesis
Lexem: )
Type: Parenthesis

Line 19 :

Lexem: {
Type: Block Bracket
Called method_body.

Line 20 :


Line 21 :

Lexem: }
Type: Block Bracket
Lexem: ÿ
Type: EOF
Finished Parse Phase 2.

S0	Scope:	g
	Symid:	S0
	Value:	1
	Kind:	literal
	Data:	Offset: 0
		type: int
		accessMod: unprotected

S1	Scope:	g
	Symid:	S1
	Value:	4
	Kind:	literal
	Data:	Offset: 0
		type: int
		accessMod: unprotected

S2	Scope:	g
	Symid:	S2
	Value:	0
	Kind:	literal
	Data:	Offset: 0
		type: int
		accessMod: unprotected

C3	Scope:	g
	Symid:	C3
	Value:	cat
	Kind:	Class
	Data:	Size: 12
		Type: cat

M4	Scope:	g.cat
	Symid:	M4
	Value:	StaticInit
	Kind:	method
	Data:	Size: -28
		returnType: void
		Param:	
		accessMod: protected

S5	Scope:	g
	Symid:	S5
	Value:	int
	Kind:	literal
	Data:

S6	Scope:	g
	Symid:	S6
	Value:	5
	Kind:	literal
	Data:	Offset: 0
		type: int
		accessMod: unprotected

S7	Scope:	g
	Symid:	S7
	Value:	9
	Kind:	literal
	Data:	Offset: 0
		type: int
		accessMod: unprotected

V9	Scope:	g.cat
	Symid:	V9
	Value:	x
	Kind:	ivar
	Data:	Offset: 0
		type: int
		accessMod: unprotected

S12	Scope:	g
	Symid:	S12
	Value:	25
	Kind:	literal
	Data:	Offset: 0
		type: int
		accessMod: unprotected

V13	Scope:	g.cat
	Symid:	V13
	Value:	c
	Kind:	ivar
	Data:	Offset: 4
		type: @:int
		accessMod: unprotected

V15	Scope:	g.cat
	Symid:	V15
	Value:	w
	Kind:	ivar
	Data:	Offset: 8
		type: int
		accessMod: unprotected

M18	Scope:	g.cat
	Symid:	M18
	Value:	doubleIt
	Kind:	method
	Data:	Size: -20
		returnType: int
		Param:	[P19]
		accessMod: unprotected

P19	Scope:	g.cat.doubleIt
	Symid:	P19
	Value:	i
	Kind:	param
	Data:	Offset: -15
		type: int
		accessMod: protected

M21	Scope:	g.cat
	Symid:	M21
	Value:	cat
	Kind:	method
	Data:	Size: -16
		returnType: void
		Param:	[P22]
		accessMod: unprotected

P22	Scope:	g.cat.cat
	Symid:	P22
	Value:	i
	Kind:	param
	Data:	Offset: -15
		type: int
		accessMod: protected

M23	Scope:	g
	Symid:	M23
	Value:	main
	Kind:	method
	Data:	Size: -12
		returnType: void
		Param:	[]
		accessMod: unprotected

T25	Scope:	g.cat.StaticInit
	Symid:	T25
	Value:	T25
	Kind:	temp
	Data:	Offset: -15
		type: int
		Used as Ref: N

T26	Scope:	g.cat.StaticInit
	Symid:	T26
	Value:	T26
	Kind:	temp
	Data:	Offset: -19
		type: int
		Used as Ref: N

T29	Scope:	g.cat.StaticInit
	Symid:	T29
	Value:	T29
	Kind:	temp
	Data:	Offset: -23
		type: int
		Used as Ref: N

T30	Scope:	g.cat.StaticInit
	Symid:	T30
	Value:	T30
	Kind:	temp
	Data:	Offset: -27
		type: ref
		Used as Ref: N

T34	Scope:	g.cat.doubleIt
	Symid:	T34
	Value:	T34
	Kind:	temp
	Data:	Offset: -19
		type: int
		Used as Ref: N


size: 23

Line 1 :

                         FRAME g_main, blank      	; Create an activation record
                         CALL g_main              	; Invoke the function   
    HALT:                TRP0                                              

Line 8 :

    g_cat_doubleIt:      FUNC g_cat_doubleIt                               

Line 9 :

                         MUL P19, P19, T34        	; i * i -> T34          
                         RETURN T34                                        

Line 10 :

                         RTN                                               

Line 13 :

    g_cat_cat:           FUNC g_cat_cat                                    
                         FRAME g_cat_StaticInit, this	; Create an activation record
                         CALL g_cat_StaticInit    	; Invoke the function   

Line 14 :

                         MOV V15, P22             	; i -> w                

Line 15 :

                         RETURN this                                       
                         RTN                                               

Line 2 :

    g_cat_StaticInit:    FUNC g_cat_StaticInit                             

Line 3 :

                         MUL S7, S1, T25          	; 9 * 4 -> T25          
                         ADD S6, T25, T26         	; 5 + T25 -> T26        
                         MOV V9, T26              	; T26 -> x              

Line 4 :

                         MUL S1, S12, T29         	; sizeof(int) * S12 -> T29
                         NEW T29, T30             	; malloc(T29) -> T30    
                         MOV V13, T30             	; T30 -> c              

Line 16 :

                         RTN                                               

Line 19 :

    g_main:              FUNC g_main                                       

Line 21 :

                         RTN                                               
