;; Define 3 class hierarchies
(defclass A () ())
(defclass B (A) ())
(defclass C (B) ())

(defclass V () ())
(defclass W (V) ())
(defclass X (W) ())

(defclass Y () ())
(defclass Z (Y) ())

;; Define Multimethods
(defgeneric f (p1 p2 p3))
(defmethod f ((p1 A) (p2 V) (p3 Y)) (print '(A V Y)))
(defmethod f ((p1 B) (p2 W) (p3 Y)) (print '(B W Y)))
(defmethod f ((p1 C) (p2 X) (p3 Y)) (print '(C X Y)))
(defmethod f ((p1 A) (p2 V) (p3 Z)) (print '(A V Z)))
(defmethod f ((p1 A) (p2 X) (p3 Z)) (print '(A X Z)))
(defmethod f ((p1 B) (p2 X) (p3 Z)) (print '(B X Z)))
(defmethod f ((p1 C) (p2 V) (p3 Z)) (print '(C V Z)))

;; Create objects
(setf a (make-instance 'A))
(setf b (make-instance 'B))
(setf c (make-instance 'C))
(setf v (make-instance 'V))
(setf w (make-instance 'W))
(setf x (make-instance 'X))
(setf y (make-instance 'Y))
(setf z (make-instance 'Z))

;; Test Combinations
(f a v y)   ; (A V Y)
(f a v z)   ; (A V Z)
(f a w y)   ; (A V Y)
(f a w z)   ; (A V Z)
(f a x y)   ; (A V Y)
(f a x z)   ; (A X Z)
(f b v y)   ; (A V Y)
(f b v z)   ; (A V Z)
(f b w y)   ; (B W Y) 
(f b w z)   ; (B W Y)
(f b x y)   ; (B W Y)
(f b x z)   ; (B X Z)
(f c v y)   ; (A V Y)
(f c v z)   ; (C V Z)
(f c w y)   ; (B W Y)
(f c w z)   ; (C V Z)
(f c x y)   ; (C X Y)
(f c x z)   ; (C X Y)
